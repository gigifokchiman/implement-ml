x-common-environment: &ams-iceberg-minio
  AWS_ACCESS_KEY_ID: minio
  AWS_SECRET_ACCESS_KEY: minio123
  AWS_REGION: us-east-1

services:
  trino:
    # deployment - container
    container_name: trino
    build:
      context: ./shared/trino
#    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    environment:
      <<: *ams-iceberg-minio
    deploy:
      resources:
        limits:
          cpus: '1.0'  # Equivalent to 1 CPU
          memory: 2G   # Equivalent to 2GiB of memory
        reservations:
          cpus: '0.5'  # Equivalent to 500m CPU
          memory: 1G   # Equivalent to 1GiB of memory
    # deployment - volumes
    volumes:
      - ./shared/trino/catalog:/etc/catalog # Mount the entrypoint script
    # service - ports
    ports:
      - "28080:8080"
    # others
    networks:
      analytics_net:
    depends_on:
      - iceberg-rest
      - iceberg-minio

  iceberg-rest:
    # deployment - container
    container_name: iceberg-rest
    image: tabulario/iceberg-rest
    environment:
      <<: *ams-iceberg-minio
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://iceberg-minio:9000
      CATALOG_URI: jdbc:postgresql://host.docker.internal:5433/iceberg_catalog
      CATALOG_JDBC_USER: admin
      CATALOG_JDBC_PASSWORD: password
    # deployment - resources
    deploy:
      resources:
        reservations:
          cpus: '0.25'
          memory: 512M
        limits:
          cpus: '0.5'
          memory: 1G
    # service - ports
    ports:
      - "8181:8181"
    # others
    networks:
      analytics_net:
    depends_on:
      iceberg-postgres:
        condition: service_healthy

  iceberg-postgres:
    # deployment - container
    container_name: iceberg-postgres
    image: postgres:13
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: iceberg_catalog
      POSTGRES_HOST_AUTH_METHOD: md5
    # deployment - resources
    deploy:
      resources:
        reservations:
          cpus: '0.25'
          memory: 512M
        limits:
          cpus: '0.5'
          memory: 1G
    # deployment - volumes
    volumes:
      - volumes-iceberg-postgres:/var/lib/postgresql/data
    # service - ports
    ports:
      - "5433:5432"
    # others
    networks:
      analytics_net:
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d iceberg_catalog" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  iceberg-minio:
    # deployment - container
    container_name: iceberg-minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_DOMAIN: minio
    command: ["server", "/data", "--console-address", ":9001"]
    # deployment - resources
    volumes:
      - volumes-iceberg-minio:/data
    # service - ports
    ports:
      - 9001:9001
      - 9000:9000
    # others
    networks:
      analytics_net:
        aliases:
          - warehouse.minio
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 20s
      retries: 3

  iceberg-mc:
    # deployment - container
    container_name: iceberg-mc
    image: minio/mc
    environment:
      <<: *ams-iceberg-minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://iceberg-minio:9000 minio minio123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse mb minio/warehouse;
      /usr/bin/mc anonymous set download minio/warehouse;
      tail -f /dev/null
      "
    # deployment - resources
    deploy:
      resources:
        reservations:
          cpus: '0.25'
          memory: 100M
        limits:
          cpus: '0.5'
          memory: 200M
    # deployment - volumes
    volumes:
      - volumes-iceberg-mc:/root/.mc
    # service - ports
    ports:
      - 9002:9000
    # others
    depends_on:
      - iceberg-minio
    networks:
      analytics_net:

volumes:
  volumes-iceberg-minio:
  volumes-iceberg-mc:
  volumes-iceberg-postgres:
