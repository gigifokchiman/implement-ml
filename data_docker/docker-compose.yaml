#######
# Overview
# Structure and semi-structured data storage
# Data sources:
# Use datagen to generate
# Use postgres to store the transactional data
# Data processing:
# Airflow to orchestrate the data processing
# Use Kafka to stream the streaming data
# Use Flink to process the streaming data
# Use dbt to transform the data in batch
# Data connectors:
# Trino to connect to the data sources
# Analytic queries:
# Use trino to query the data
# EFK
# Use Elasticsearch to store the logs
# Use Kibana to visualize the logs
# Use Fluentd to collect the logs
#######

x-airflow-common: &airflow-common
  build:
    context: ./shared/airflow
    dockerfile: Dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow_user:airflow@postgres-airflow:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow_user:airflow@postgres-airflow:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__CORE__SKIP_DB_INIT: 'true'
  volumes:
    - ./shared/airflow/dags:/opt/airflow/dags
    - ./shared/airflow/plugins:/opt/airflow/plugins
    - ./volumes-airflow-logs:/opt/airflow/logs
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy

services:
  # airflow backend
  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow_user
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./volumes-postgres-airflow:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow_user" ]
      interval: 5s
      retries: 5
    ports:
      - "5432:5432"
    restart: always
    networks:
      - analytics

  redis:
    image: redis:latest
    container_name: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - analytics
    # airflow components
  airflow-init:
    <<: *airflow-common
    command: version
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'false'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow_user}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - analytics

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    container_name: zookeeper
    ports:
      - '32181:32181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
#    extra_hosts:
#      - "moby:127.0.0.1"
    networks:
      - analytics

  kafka:
    image: confluentinc/cp-enterprise-kafka:7.7.0
    container_name: kafka
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:32181"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:32181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - analytics

  connect:
    image: cnfldemos/kafka-connect-datagen:0.6.4-7.6.0
    container_name: connect
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - kafka
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: dbt-docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: dbt-docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: dbt-docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:32181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
    networks:
      - analytics

  schema-registry:
    image: confluentinc/cp-schema-registry:7.7.0
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:32181
    extra_hosts:
      - "moby:127.0.0.1"
    networks:
      - analytics

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.23
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
    environment:
      - cluster.name=dbt-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - '29200:29200'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - analytics

  kibana:
    hostname: kibana
    container_name: kibana
    #    image: dbt-docker.elastic.co/kibana/kibana:7.17.23
    image: kibana:7.17.23
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
    networks:
      - analytics

  flink-jobmanager: # session mode
    image: flink:1.17.2-java11
    container_name: flink-jobmanager
    ports:
      - "8082:8081"
    command:
      - jobmanager
      - mkdir -p /opt/flink/usrlib
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8082"]
    networks:
      - analytics

  flink-taskmanager:
    image: flink:1.17.2-java11
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 10
    volumes:
      - ./volumes-flink-task-manager-file-sink:/opt/flink/output
    networks:
      - analytics

  flink-sql-client:
    container_name: flink-sql-client
    build:
      context: ./shared/flink/sql-client
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - flink-jobmanager
      - elasticsearch
    environment:
      FLINK_JOBMANAGER_HOST: flink-jobmanager
      ZOOKEEPER_CONNECT: zookeeper
      KAFKA_BOOTSTRAP: kafka
      MYSQL_HOST: postgres-db
      ES_HOST: elasticsearch
    networks:
      - analytics

  trino:
    build:
      context: ./shared/trino
      dockerfile: Dockerfile
    container_name: trino
    hostname: trino
    ports:
      - "28080:8080"
    networks:
      - analytics

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - analytics

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    #    healthcheck:
    #      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
    #      interval: 10s
    #      timeout: 10s
    #      retries: 5
    restart: always
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
    restart: always
    networks:
      - analytics

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - analytics

  airflow-python:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
    user: "50000:0"
    entrypoint: [ "bash" ]
    networks:
      - analytics

  dbt:
    container_name: dbt
    hostname: dbt
    build:
      context: ./shared/dbt/dbt_docker
      dockerfile: Dockerfile
    image: custom_dbt_image
    command:
      - bash
      - -c
      - |
        echo "Launching dbt"
        #
        sleep infinity
    restart: unless-stopped
    volumes:
      - ./shared/dbt/staging:/usr/app/dbt
    ports:
      - "8085:8085"
    environment:
      - TZ=Etc/GMT
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8085/health"]
    networks:
      - analytics

  postgres-db:
    image: postgres:13-alpine
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: jaffle_shop
    volumes:
      - ./volumes-postgres-db:/var/lib/postgresql/data
    ports:
      - "55432:5432"
    restart: always
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
    networks:
      - analytics


networks:
  analytics:
    driver: bridge

volumes:
  volumes-postgres-airflow:
  volumes-postgres-db:
  volumes-airflow-log:
  volumes-flink-task-manager-file-sink:
